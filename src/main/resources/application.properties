spring.application.name=dawproject


# ===================== CONFIGURACIÓN PARA USAR LOCALMENTE =====================

# sf10020@ues.edu.sv
# Admin2025

# spring.datasource.url=jdbc:postgresql://localhost:5432/dawdb
# spring.datasource.username=postgres
# spring.datasource.password=12345
# spring.datasource.driver-class-name=org.postgresql.Driver
# # spring.jpa.hibernate.ddl-auto=create



# spring.security.oauth2.client.registration.auth0.client-id=3VksVH1iIcuX99sbMZlyJ6dIQq8WXHfw
# spring.security.oauth2.client.registration.auth0.client-secret=ethNkuCtAS7M8ts0bfBs53r5ToMKVtMRSc7vF4GL-TnSejXvO6Qu1oXKBidq3815
# spring.security.oauth2.client.registration.auth0.scope=openid,profile,email
# spring.security.oauth2.client.registration.auth0.redirect-uri={baseUrl}/login/oauth2/code/auth0
# spring.security.oauth2.client.registration.auth0.provider=auth0
# spring.security.oauth2.client.provider.auth0.issuer-uri=https://dawproject.us.auth0.com/
# spring.security.oauth2.resourceserver.jwt.audiences=https://dawproject.us.auth0.com/api/v2/



# ===================== CONFIGURACIÓN PARA USAR EN PRODUCCIÓN =====================

# ===================== CONFIGURACIÓN DE BASE DE DATOS =====================

spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}
spring.jpa.hibernate.ddl-auto=none


spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
# ===================== CONFIGURACIÓN DE JPA =====================

spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

# Dialecto específico para PostgreSQL
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# ===================== CONFIGURACIÓN DEL SERVIDOR =====================
server.port=8080

# ===================== THYMELEAF (opcional) =====================
spring.thymeleaf.cache=false

# ===================== AUTH0 =====================
spring.security.oauth2.client.registration.auth0.client-id=${AUTH0_CLIENT_ID}
spring.security.oauth2.client.registration.auth0.client-secret=${CLIENT_SECRET_AUTH0}
spring.security.oauth2.client.registration.auth0.scope=openid,profile,email
spring.security.oauth2.client.registration.auth0.redirect-uri={baseUrl}/login/oauth2/code/auth0
spring.security.oauth2.client.registration.auth0.provider=auth0
spring.security.oauth2.client.provider.auth0.issuer-uri=${AUTH0_ISSUER_URI}
# Audience para validar JWT correctamente
spring.security.oauth2.resourceserver.jwt.audiences=${AUTH0_AUDIENCE}




